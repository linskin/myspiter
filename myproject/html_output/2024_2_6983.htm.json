[
    {
        "title": " 开源软件库生态治理技术研究综述: 二十年进展 ",
        "authors_cn": [
            "\r\n王莹",
            "\r\n伍盈欣",
            "\r\n高天",
            "\r\n陈子莺",
            "\r\n许畅",
            "\r\n于海",
            "\r\n张成志"
        ],
        "authors_en": [
            "\r\nWANG Ying",
            "\r\nWU Ying-Xin",
            "\r\nGAO Tian",
            "\r\nCHEN Zi-Ying",
            "\r\nXU Chang",
            "\r\nYU Hai",
            "\r\nCHEUNG Shing-Chi"
        ],
        "summary": [
            "\r\n",
            ": 在“人-机-物”三元融合、泛在计算的时代蓝海下, “开放多变”“需求多样”和“场景复杂”的软件部署和运行环境对开源软件库生态的治理技术提出了更多需求和更高期望. 为进一步推动构建可信软件供应链生态, 围绕泛在计算模式、打造自主可控的技术体系, 聚焦于开源软件库管理生态, 收集近20多年来(2001–2023)发表于软件工程领域较高影响力的学术期刊和会议的348篇论文, 对开源软件库生态治理技术的研究工作进行梳理. 讨论开源软件库生态的建模与分析、演化与维护、质量保证和管理等方面的工作, 总结研究现状、问题、挑战与趋势.",
            "\r\n",
            ": Under the new era of “human-machine-thing” ternary integration and ubiquitous computing, the software deployment and operation environment of “open and changeable”, “diverse needs”, and “complex scenarios” have put forward more requirements and higher expectations for the governance of open-source software library ecosystems. To further promote the construction of trusted software supply chain ecosystems and create an independent and controllable technical system based on the ubiquitous computing model, this study focuses on open-source software library ecosystems. It collects 348 authoritative papers in this field in the past two decades (2001–2023) and sorts out the research work of open-source software library management ecological governance technology. The study discusses the modeling and analysis, evolution and maintenance, quality assurance, and management of open-source software supply chain ecosystems, and summarizes the research status, problems, challenges and trends."
        ],
        "keywords": [
            "开源软件供应链",
            "开源治理",
            "软件库生态系统",
            "open-source software supply chain",
            "open-source governance",
            "software library ecosystem"
        ],
        "body": [
            "当前, 数字化浪潮与新产业革命正迎来历史性交汇, 软件新技术正在对全球经济进行全方位、全角度、全链条的谱写和改造, 软件产业对数字经济的支撑作用与日俱增",
            ". 与此同时, 开源模式凭借强大的资源汇集和协同创新优势, 已经成为全球软件开发的主导模式. 开源软件遍布基础设施、数据管理、开发平台、应用程序等多个不同的领域, 如今成为各领域软件开发不可或缺的“原材料”",
            ". 开源软件的生态建设随之成为全球软件产业乃至数字经济发展竞争的新赛道.",
            "在“人-机-物”三元融合、泛在计算的时代蓝海下, “开放多变”“需求多样”和“场景复杂”的软件部署和运行环境对开源软件库生态治理提出了更多需求和更高期望",
            ". 从国家安全和产业安全的视角, 汇聚和治理跨界涉众的开源软件制品、构建和维护可信、可持续演化的开源软件库生态是泛在计算新时代所面临的重要挑战",
            ". 然而, 现代软件制品在生产过程中4个维度上的不可预见性、不可控制性、复杂性与多样性, 使得“软件危机”已高悬在开源软件库供应链之上",
            ". 首先, 软件演化行为的不可预见性. 开源软件库生态中软件库有彼此不同的开发和维护计划, 呈现出异步演化的趋势. 软件项目“按需组装”的过程中, 需要对它依赖软件库的演化状态及可信性进行验证, 然而当前缺乏有效的技术为库版本的可信保障机制提供决策支持. 其次, 软件构建环境的不可控制性. 构建工具对软件库的安装规则复杂多变, 与依赖配置属性存在干扰性. 因此, 开放难控的软件构建环境已经成为大型软件部署的痛点. 第三, 上下游软件间依赖关系的复杂性. 开源软件库之间中错综复杂的依赖关系使得缺陷和安全漏洞肆意传播, 严重地威胁软件的可信性. 第四, 程序语言特征的多样性. 在多样化程序语言配置模式的作用下, 软件自身及其依赖资源的动态演化使得软件项目具有更高的复杂性, 将其部署在泛在计算环境中会大大增加软件质量的不确定性. 鉴于此, 本文聚焦于开源软件库生态治理技术, 总结和梳理该领域的研究现状、问题、挑战与趋势, 以进一步推动构建可信开源软件供应链, 打造自主可控的技术体系.",
            "开源软件供应链是指现代软件开发和维护活动中涉及的所有上下游开源软件社区、源码软件库、二进制软件库、依赖管理器、软件中央仓库, 以及开发者、维护者和基金会组织等实体, 按照依赖、组合等约束关系形成的供应链网络",
            ". 本文聚焦于开源软件库生态相关的研究工作, 它是开源软件供应链最基本的组成部分, 涉及上下游开源软件社区中源码、二进制软件库、依赖管理器、软件中央仓库等实体在相互协作过程中的建模与分析、演化与维护、质量保证和管理等方面. 全面收集近20多年来(2001–2023)该领域的实证研究、案例研究、分析方法及框架、技术、工具等权威学术期刊和会议论文, 综述开源软件库生态治理技术的研究进展.",
            "本文第2节介绍开源软件库管理与维护的基本概念. 第3节描述研究方法. 第4节分析研究现状. 第5节讨论开源软件库生态的建模方法与多样化的演化行为. 第6节和第7节梳理备受研究者关注的依赖缺陷问题及其治理技术. 第8节讲述当前研究的局限性, 展望未来的研究方向. 第9节对比了相关研究工作. 第10节总结全文.",
            "为便于表述开源软件库生态的建模、演化、依赖缺陷问题和相应的治理技术, 本节引入开源软件库管理与维护相关的4个基本概念: 依赖管理器、软件中央仓库、软件构建方式和语义版本控制规则. 软件中央仓库是开源软件库生态的实体形态, 是建模分析的基础; 依赖管理器决定了软件项目依赖配置和安装规则, 在现代软件构建方式的作用下, 是引发依赖缺陷问题的重要因素之一; 在软件库演化的过程中, 库开发者是否严格遵守语义版本控制规则影响软件库版本更新的兼容性等问题, 决定了开源软件库生态的可持续演化.",
            "● 依赖管理器. 在软件项目构建过程中, 依赖管理器是用于解析依赖配置, 以及自动安装、升级、配置和使用软件库的系统或工具的集合. 依赖管理器能够极大地促进第三方软件库的重用, 简化软件项目构建和测试过程. 依赖管理器于20世纪90年代最早在Unix发行版中引入",
            ". 在基于Linux和Unix系统环境中, 为了便于依赖管理, 社区开发了多种依赖管理器, 例如RedHat的yum, Debian的apt等. 此后, 在其他程序语言社区也陆续推出了功能特点不同的依赖管理器, 例如Java的Maven和Gradle, JavaScript的npm等.",
            "目前很多依赖管理器的功能也逐步扩展与完善, 除了能够管理第三方软件库, 同时兼具管理软件生命周期的构建、测试、部署和发布等全过程",
            ". 在过去的20年间, 研究人员",
            "在依赖管理器的解析能力改进方面也付出了巨大努力.",
            "● 软件中央仓库. 软件中央仓库是依赖管理器团队自己创建并维护, 服务于整个开源社区的软件库存储库. 软件中央仓库包含了对应程序语言社区中大部分常用的软件库",
            ". 例如, 截至2023年4月, 软件中央仓库PyPI存储了近45万个Python软件库的446万个版本",
            ".",
            "● 软件构建方式. 纵观软件构建方式的演化历史, 其依赖资源已经从单一、封闭、静态、可控的自主软件库管理方式走向多样、开放动态、难控的“软件中央仓库”式集中化管理和自动化配置模式",
            ". 如",
            "所示, 依赖管理器能够在软件项目的构建环境中, 解析依赖配置文件——通过从软件中央仓库中远程检索直接依赖与间接依赖的软件库、计算依赖约束、获得依赖解决方案, 并且根据用户需求按照一定顺序和规则安装软件库.",
            "● 语义版本控制规则. 语义版本控制是指软件版本的编号控制规则, 由3位版本号构成, 分别为主版本号、次版本号和补丁版本号: major.minor.patch",
            ". 主版本号增加表明当前版本较以往版本发生了API不兼容的修改, 次版本号增加表明软件以向后兼容的方式添加了新功能, 补丁版本号增加表明软件以向后兼容的方式修复了缺陷. 为保证开源软件库生态的可持续性演化, 语义版本控制规则在多种程序语言社区中被广泛采纳, 软件库的开发者在版本迭代之时需要遵守上述约定.",
            "本文采用Wohlin等人",
            "提出的系统文献综述方法, 结合de Paulo Sobrinho等人",
            "提出的文献收集方法开展开源软件库生态治理技术研究的综述工作. 本节中, 我们将详细介绍本文的研究方法.",
            "我们通过总结和分析相关论文来呈现开源软件库生态的研究历程, 并探究如何刻画、抽象并分析开源软件库生态, 如何诊断和治理不同程序语言软件库生态中的依赖缺陷问题, 为未来可能的研究方向提供参考. 为了实现这个目标, 本文提出并尝试回答如下问题.",
            "(1) 问题1 (研究文献分布): 近20多年来(2001–2023), 开源软件库生态研究文献的分布情况如何?",
            "(2) 问题2 (建模与分析): 如何建模与分析开源软件库生态? 如何理解软件库生态的演化行为?",
            "(3) 问题3 (依赖缺陷问题): 开源软件库生态的演化行为会导致哪些依赖缺陷问题?",
            "(4) 问题4 (治理技术): 如何诊断与修复开源软件库生态中的依赖缺陷问题?",
            "问题1是对目前领域内近20多年来文献数据的分析, 以了解本领域的研究现状. 问题2探究不同程序语言开源软件库生态的建模方法和演化行为. 问题3讨论开源软件库生态多样化的演化行为导致的多种依赖缺陷问题. 问题4针对上述的依赖缺陷问题, 总结现有文献的诊断和治理关键技术.",
            "文献收集过程主要包括期刊/会议范围的确定、论文筛选、“滚雪球”式相关论文的筛选",
            ". 在论文收集过程中, 为了保证论文的相关性和权威性, 我们在第3.3节制定了筛选标准. 如",
            "所示, 为了避免搜索引擎关键字查询方法的漏查缺点, 尽可能全面地找到开源软件库生态研究领域权威期刊/会议的论文, 本文进行两轮筛选和扩充, 得到最终论文集. 具体步骤如下.",
            "(1) 初轮论文筛选. (1-a) 初轮筛选期刊/会议范围: 如",
            "(1-a)所示, 我们选取软件工程领域较高影响力的7个学术期刊和会议, 作为初次筛选的范围; (1-b) 初轮筛选论文: 对(1-a)步骤所得期刊/会议中发表于2001年1月–2023年4月期间的所有论文按照第3.3节提出的4条标准进行筛选, 得到117篇论文; (1-c) 初轮筛选相关论文: 以“滚雪球”的方式",
            ", 整理与收集(1-b)步骤所得论文中引用的参考文献, 同样按照第3.3节的标准从参考文献中筛选出136篇论文. 与(1-b)筛选论文进行合并去重后, 成为初筛论文集, 共计192篇.",
            "(2) 二轮论文筛选. (2-a) 二轮筛选期刊/会议范围: 对初筛论文集中的期刊/会议出现的频次进行统计, 选取出现次数3次及以上的期刊/会议作为最终期刊/会议范围. 如",
            "所示, 我们共得到19个会议和8个期刊; (2-b) 二轮筛选论文: 在最终期刊/会议范围中除(1-b)外的期刊/会议, 针对发表于2001年1月–2023年4月期间的所有论文按照第3.3节标准进行筛选, 共得到论文157篇; (2-c) 二轮筛选相关论文: 再次以“滚雪球”的方式",
            ", 按照第3.3节的标准筛选(2-b)所得论文中引用的参考文献283篇, 与(2-b)筛选论文进行合并去重得到最终论文集, 共计348篇.",
            "为保证收集论文的相关性和权威性, 我们制定了文献筛选标准.",
            "(1) 论文相关性: 根据引言和第3.1节中定义的研究范围和研究问题, 本文聚焦于开源软件库生态的建模与分析、演化与维护、质量保证和管理等方面的研究工作. 本文以研究对象“软件供应链”“软件库生态”“软件依赖”以及“第三方软件库”作为搜索关键词, 以收集与之主题相关的研究文献. 即论文标题、关键字和摘要出现“software ecosystem”“software supply chain”“software dependencies”“third-party libraries”的论文. 搜索可能会返回偶然使用关键字, 但却与该领域的建模与分析、演化与维护、质量保证和管理等方面无关的文献, 本文通过仔细阅读, 以交叉验证的方式排除无关文献.",
            "(2) 论文完整性: 最全面、最新版本的论文. 如果在会议论文的基础上进行了扩展, 进一步形成期刊论文, 只保留期刊论文版本, 排除会议论文版本.",
            "(3) 论文权威性: 经过同行评审且已正式发表的论文. 排除书籍章节、硕博论文等论文.",
            "(4) 论文页数: 正文页数大于等于8页的论文.",
            "为回答研究问题1–4, 我们对论文集进行研读, 并对所需数据项进行了分析和提取. ",
            "描述了从最终论文集的324篇论文中数据提取和收集的详细信息. “提取数据项”一列表明从每篇论文中提取的相关数据信息, “研究问题”一列表明对应的数据项所尝试回答的研究问题. 为了避免在人工分析过程中出现错误, 本文由两名研究人员独立分析和提取数据项, 并进行交叉验证, 以保证数据的正确性.",
            "(1)搜索关键字. 根据文献[",
            "]中的方法, 搜索关键字的建立应当是一个迭代扩充的过程, 即通过多次检索不断地补充与“software ecosystem”“software supply chain”“software dependencies”“third-party libraries”同义或相关的关键字. 由于上述关键字已经帮助我们定位到相当数量的研究论文, 本文没有进一步扩充关键字, 这可能会导致漏掉部分相关文献.",
            "(2)文献收集. 文献[",
            "]提出的滚雪球式文献收集方式包括“前向搜索” (收集论文引用的文献)和“后向搜索” (收集引用该论文的文献), 本文仅采用了“前向搜索”方式, 结合定义的关键字收集到348篇领域内权威文献, 但可能会因此而遗漏部分相关文献.",
            "我们通过分析每篇论文的发表时间、出版刊物和主要贡献类型等基本信息来理解开源软件库生态研究现状与趋势.",
            "虽然我们尝试收集了2001–2022年这20多年间开源软件库生态治理技术领域的研究工作, 并对2023年4月之前的权威期刊和会议论文进行了补充. 但是结果表明, 自2005年起才开始涌现出相关的研究工作. 后文",
            "(a)描述了每年论文发表数量的分布情况, 可以观察出在2010–2022年的10多年间, 论文的发表数量迎来了快速增长. 大量研究的涌现应该是由于近10年间开源生态的快速发展与演化以及现代软件项目愈发广泛地采用第三方软件库进行开发, 衍生出了一系列开源软件供应链的质量问题, 吸引了实践者和研究者的关注.",
            "我们通过将论文累计发表数量拟合为幂函数, 来观察过去20年间开源软件库生态研究领域的论文发表趋势. 如",
            "(b)所示, 拟合曲线的斜率在2010–2022年间显著增加, 决定系数(R",
            ")达到峰值(0.99746). 这意味着, 随着开源生态的繁荣与复杂度激增, 我们可以预测开源软件库生态治理技术的研究在未来会持续大幅增长.",
            "呈现了论文发表刊物的分布情况. 在我们收集到的348篇论文集中, 68.1%的研究发表于软件工程领域的权威学术会议, 31.9%的研究发表于期刊. 在237篇会议论文中, ICSE, MSR, SANER, ESEC/FSE, ICSM和ASE这6个会议占据了33.0%的开源软件库生态治理研究工作的论文发表数量. 其中, ICSE是收录相关研究最多的学术会议, 2001–2022年间共发表论文36篇, MSR和SANER紧随其后, 分别发表论文23和16篇, 并且在近5年呈现显著的增长趋势. 在111篇期刊论文中, 大多数发表于近10年间, 27.5%的发表来自TSE、ESE和JSS, 而TOSEM和IST的发表数量仅占11.2%.",
            "如",
            "所示, 我们把软件生态系统的研究内容划分为实证研究、案例研究、方法及框架、技术、工具及综述这6个类别, 并将收集到的论文集按照上述研究内容归类. 收集的论文集中: 149篇论文以实证研究的方式收集并分析开源社区中软件仓库的演化元数据(开源软件库生态依赖镜像、依赖树规模、引入的漏洞数量等)来探索有价值的发现; 5篇文章通过访谈或问卷的方式调查开发者和用户等人员对实际问题的看法来探索有价值的发现; 16篇论文通过收集并分析缺陷问题的原因、症状和修复方式等信息为开发者提供问题解决的启发式发现; 34篇论文提出度量方法或分析框架来调查开源软件库生态的某些演化行为或特定问题; 为解决特定的软件库依赖缺陷问题, 77篇文献提出有效的技术方案或框架, 96篇论文研究并发布了相应的工具; 目前仅有7篇文章综述了开源生态系统/安卓社区中第三方软件库相关研究工作. 部分论文在开展实证研究的基础上, 结合启发式的方法开发了解决实际问题的新技术/工具.",
            "我们对每篇论文的关键词进行分析, 统计关键词的出现频次, 揭示论文的研究热点. 将关键词词频降序排序, 得到研究热点如",
            "所示. 频次排名前20的关键词为第三方软件库、实证研究、软件仓库挖掘、软件生态系统演化、安全漏洞、开源软件生态系统、API破坏性变更、API使用、语义版本、npm、Android、开源许可证、软件重用、API演化、PyPI、依赖管理、依赖网络、软件维护和程序分析.",
            "结合论文内容解读",
            "和",
            ", 实证研究和软件仓库挖掘等技术是该领域中最常用的研究方法, 被154篇论文所采纳, 来开展开源生态系统的演化分析 (54篇, 35.1%)、安全漏洞 (42篇, 27.3%)、API破坏性变更和使用 (36篇, 23.4%)、开源许可证 (22篇, 14.3%)等方面的研究, 尝试挖掘出有价值的知识, 以提高开源软件库生态的可持续演化性. 而npm、PyPI和Android是研究人员关注度较高的开源软件库生态社区. 目前开源软件库生态治理的研究方兴未艾, 在质量保证、工具支持以及软件生态系统新范型等方面亟需研究人员开展深入探索",
            "研究问题1结论总结: 在我们收集到的348篇论文集中, 68.1%的研究发表于软件工程领域影响力较高的学术会议(包括ICSE, MSR, SANER, ESEC/FSE, ICSM和ASE等), 31.9%的研究发表于软件工程领域影响力较高的期刊(包括TSE, TOSEM, JSS和IST等). 实证研究和软件仓库挖掘等技术是该领域中最常用的研究方法, 被154篇论文所采纳, 来开展开源生态系统的演化分析 (54篇, 35.1%)、安全漏洞 (42篇, 27.3%)、API破坏性变更和使用 (36篇, 23.4%)、开源许可证 (22篇, 14.3%)等方面的研究, 尝试挖掘出有价值的知识, 以提高开源软件库生态的可持续演化性. 而npm、PyPI和Android是研究人员关注度较高的开源软件库生态社区.",
            "数以万计相互依存的软件项目所形成的供应链网络为软件开发带来了便利, 同时也为依赖管理带来了前所未有的挑战. 规模指数级增长的软件项目及其之间庞杂的依赖关系使得供应链的复杂度激增",
            ". 一方面, 供应链上任何一个节点的问题都可能波及链条上其他节点, 使得损失被放大. 另一方面, 任何一个节点都可能受到供应链上其他节点的问题影响, 使得问题的定位与解决变得困难",
            ". 在这样的背景下, 许多研究者聚焦在如何刻画、抽象和分析复杂的依赖关系网络, 以及如何基于网络模型探索生态的演化行为.",
            "开源软件库依赖关系建模是理解和观察软件生态演化的重要手段与前提. 研究工作中通常将软件库表示成有向图",
            "=(",
            ", ",
            "), 其中, 节点",
            "代表软件中央仓库中的软件库版本集合, 边",
            "={(",
            ", ",
            ", ",
            ") | ",
            ", ",
            " ∈",
            "}表示软件库版本之间的依赖关系集合. 对于依赖关系 ",
            "→",
            "而言, 下游软件库的版本",
            "由上游软件库",
            "对其的版本约束",
            "以及构建环境对软件库版本的依赖解析规则共同决定.",
            "不同程序语言社区在软件库的依赖管理与依赖解析方面定制了语法规则, ",
            "是对开源软件库生态建模的相关工作的总结, 具体来说有以下几个方面.",
            "● 在依赖管理方面, 除了允许软件明确地声明它依赖的上游软件库特定版本以外, 还允许声明版本范围",
            "来约束第三方软件库的版本(例如< 2.1.0). 更为重要的是, Python和JavaScript等语言社区定制了语义版本约束规则, 开发者可以采用*, ^, ~等操作符进行灵活的版本控制. 例如, 版本约束2.1.* = ~ 2.1.0表示可以安装[2.1.0, 2.2.0)范围内向后兼容的软件库版本.",
            "● 在依赖解析方面, Python和JavaScript等语言的依赖管理器pip和npm会从依赖配置脚本中解析满足该版本范围",
            "中的最新版本(例如, 在[2.1.0, 2.2.0)版本范围中解析并安装软件库的2.1.9版本), 而C#的依赖管理器NuGet则会选择版本约束范围中的最旧版本(例如, 在[2.1.0, 2.2.0)版本范围中解析并安装软件库的2.1.0版本).",
            "现有的研究工作",
            "尝试对多种程序语言软件库生态建模, 涵盖了10个软件中央仓库. 综合上述文献, 我们将对应的依赖管理器、依赖配置文件、依赖版本解析方式总结于后文",
            "中. 文献[",
            ", ",
            ", ",
            "]在建模过程中, 依赖元数据的获取源自监控开源软件库生态演化的开源数据平台",
            ", 其余研究通过爬取软件项目的依赖配置文件, 根据每种程序语言的依赖解析规则构建生态网络模型.",
            "Mora-Cantallops等人",
            "在对CRAN生态建模的基础上, 利用复杂网络理解进行分析, 证明依赖网络符合无标度网络的特性以及小世界特性(节点之间的平均距离很短). Zimmermann等人",
            "结合npm生态依赖模型定义了一系列度量指标, 系统地分析了开源软件库的安全漏洞攻击面. Lertwittayatrai等人",
            "将npm生态剖析成高维度拓扑结构数据, 通过软件库之间的依赖结构提供对生态系统的洞察与见解. 文献[",
            ", ",
            ", ",
            ", ",
            ", ",
            "]对多种程序语言的软件生态进行建模, 揭示了不同生态拓扑结构、软件库版本演化方面的差异. 而Bavota等人",
            "、Nielsen等人",
            "和Wittern等人",
            "分别针对Maven生态、Apache社区与npm生态进行依赖拓扑的演化分析. Abate等人",
            "、Zheng等人",
            "和German等人",
            "等面向Linux社区的软件库依赖关系进行建模分析, 其中文献[",
            "]提出技术框架以形式化建模与可视化分析C语言软件库之间的依赖关系, 模型中的节点嵌入了多维度的属性信息, 包括版本和开源许可证等.",
            "在开源软件库生态建模的基础上, 关于演化行为的研究也随之展开. 开源生态中上下游软件库的异步演化, 是引发依赖缺陷问题的根源. 因此, 了解开源软件库生态的演化行为是开源生态治理的重要前提. 如后文",
            "所示, 我们收集到的95篇研究开源软件库生态演化行为的文献大致涵盖这3个方面, 分别面向不同的程序语言社区探讨其规模增长、持续更新和复杂性的增加.",
            "现有的研究表明, 各个程序语言的开源软件库生态规模增长明显, 无论是软件库的数量还是依赖关系数量均呈现持续增长趋势, 但不同社区之间又存在一定差异. 本节从上述两个维度, 阐述开源软件库生态规模增长的趋势.",
            "● 软件库数量: 综合研究工作",
            "的实践调查结果, 软件库数量呈线性增长的生态社区包括Maven、Cargo、CPAN、NuGet和Linux, 演化趋势呈指数增长的程序语言生态社区有npm、CRAN和Packagist. 而RubyGems生态社区中由于统计年份的不同, 虽然都是用回归模型对软件包的增长进行分析, 软件包数量在不同年份的统计分析中却呈现出不同的增长特性, 2007–2016年呈线性增长",
            ", 2012–2017年呈指数增长",
            ".",
            "● 依赖关系数量: 文献[",
            "-",
            ", ",
            ", ",
            ", ",
            ", ",
            ", ",
            "-",
            "]的研究表明, 依赖关系数量呈线性增长的生态社区包括RubyGems、Packgist、CRAN、Cargo和Packgist, 演化趋势呈指数增长的程序语言生态社区有Maven、npm、CPAN、NuGet和Linux. 通过对比可以观察出, 不同程序语言生态社区中软件库依赖关系演化趋势可能不同, 但总体上都呈现出规模增长.",
            "软件库的增加与版本更新推动着开源软件库生态的可持续演化. 现有的文献针对如下几个方面讨论不同程序语言社区的持续更新行为.",
            "● 新增软件库数量: 文献[",
            ", ",
            ", ",
            ", ",
            "-",
            "]对每月新增软件库数量的统计结果显示, 每种程序语言生态社区均呈现稳步增长趋势. 其中, npm生态每月新增软件库数量最多, CRAN生态每月版本更新数量与新增软件库数量比值稳定, 版本更新数量大约为新增软件库数量的7.5倍. 调查结果体现了开源软件库生态的持续更新与繁荣发展.",
            "● 版本更新数量: 综合文献[",
            ", ",
            ", ",
            ", ",
            ", ",
            ", ",
            ",",
            "]在多个程序语言生态社区的实践调查, 可以发现软件库每月版本更新数量整体呈现上升趋势. 然而, 由于不同程序语言社区的年龄、开发者习惯和版本发布规则不同, 导致他们在版本更新数量方面存在差异: (1) 2015年60%的npm软件库、48%的CRAN软件库、27%的RubyGems软件库都至少更新过一次, 整体呈现出活跃性. (2) 在1999–2018年的统计中, 发现CRAN生态每月版本更新的数量符合指数增长, 这可能与CRAN的“滚动发布(rolling release)”规则有关, 社区强制软件项目引用第三方软件库的最新版本. (3) 在2012–2017年的统计中, Cargo和CPAN生态的软件库版本更新数量保持稳定. 研究者分析, 可能是由于社区的年龄与活跃度的原因, Cargo是最年轻的生态社区, CPAN是最古老的生态社区. 相比之下, npm、NuGet、RubyGems和Packagist生态的软件库版本更新数量要大得多.",
            "● 版本更新频次: 文献[",
            ", ",
            "]调查并对比了CRAN、CPAN、Cargo、RubyGems和Packagist几个社区的软件库版本更新频次. 结果表明, npm生态的持续更新性最强, NuGet生态的持续更新性较高且不断增加. 综合看来, 每个程序语言生态社区中, 接近1/3的软件库在一年中版本更新了5次以上, 而1/3软件库没有任何版本发布. 文献[",
            "-",
            "]研究发现, 软件库的更新频次与其流行度存在密切的联系, 更新频次更高的软件库往往流行度也更高.",
            "● 版本更新滞后: 综合文献[",
            ", ",
            ", ",
            ", ",
            ",",
            "-",
            ",",
            "–",
            ",",
            "–",
            ",",
            "]中对不同程序语言生态社区中软件库版本更新滞后现象的实践调查, 可以发现除了CRAN社区外(“滚动发布”规则), 其他生态均呈现一定程度的版本更新滞后现象. 该现象也是导致大量安全漏洞在开源软件库生态中肆意传播的主要原因, 漏洞补丁无法及时传播进下游的软件项目中. 针对上述问题, 近年来涌现出大量研究",
            "帮助开发者对第三方软件库进行安全的版本升级.",
            "● 软件库迁移: 在软件演化过程中, 当缺陷无法通过升级第三方软件库的版本而解决时, 软件库需要被完全移除, 被另一个软件库所取代. 现有研究提出了在开源软件库生态中识别库迁移的方法",
            "和迁移演化规则的方法",
            ", 开展了库迁移趋势的实证调查",
            ", 并开发出能够量化依赖变化和软件库迁移的框架, 以全面地捕捉迁移的演化行为特征.",
            "同时, 为了解决软件库迁移引发的代码修改和兼容性问题, 近年来研究者提出了大量技术和工具",
            "以辅助开发者完成迁移操作.",
            "伴随着开源软件库生态的规模增长与持续更新, 其复杂性必然会与日俱增. 现有文献关于复杂性增加的研究与调查, 从如下几个方面开展.",
            "● 直接依赖/间接依赖软件库数量: 开源软件库生态的复杂性最直观的表现是软件库的传递性依赖关系. 文献[",
            ", ",
            ", ",
            ", ",
            ", ",
            ", ",
            ", ",
            ", ",
            ", ",
            "]的研究表明, 软件在演化过程中, 通常直接依赖软件库的数量增长缓慢, 而间接依赖软件库却呈现快速增长趋势. 每种程序语言生态中直接依赖软件库的小幅线性增长会导致间接依赖软件库数量的指数增长. 研究者提供了npm、CRAN和RubyGems生态社区在2007–2016年间的统计情况: (1) npm生态中有一半的软件库至少引入22个间接依赖软件库, 1/4的软件库至少有95个间接依赖, 2018年平均软件的间接依赖数量达到80个, 呈指数增长. 平均一个软件库的间接依赖软件库比直接依赖软件库多22.1倍. (2) CRAN生态中有一半的软件最多有5个直接依赖软件库, 平均每个软件库的间接依赖比直接依赖数量多3.64倍. (3) RubyGems生态中一半的软件最多有8个直接依赖软件库. 平均每个软件库的间接依赖比直接依赖数量多6.35倍. 与RubyGems生态相比, npm软件具备更多的传递依赖软件库, 但直接依赖软件库较少.",
            "● 上游软件/下游软件数量: 开源软件库生态的复杂性的另一种表现是上游软件和下游软件数量的激增. 文献[",
            ", ",
            ", ",
            "]的研究表明, 很多程序语言生态社区中平均下游软件数量增长比平均上游软件数量增长快, 例如RubyGems和npm社区. 而RubyGems生态中软件库的发布数量虽然远远少于npm生态, 但是每个软件库的平均下游软件数量相比于npm生态更多. 因此, 当有携带安全漏洞的软件包出现时, 会在生态社区中造成更大的“涟漪效应”. 另有研究发现, 在npm、RubyGems和CRAN这3个生态社区中, 孤立软件库所占比例不断减少, 3个社区各自呈现出一个巨大的连通软件库网络. 在连通软件库网络分别占据CRAN社区96.1%的软件库, npm社区98.2%的软件库, RubyGems社区100%的软件库. 开源软件库生态依赖的拓扑结构符合复杂网络的聚类特性, 也预示着生态复杂性的不断增加.",
            "随着开源软件库生态的规模增长、持续演化以及复杂性的增加, 在海量的软件中央仓库中如何选择合适的第三方软件库以及如何正确使用第三方软件库给开发者带来了巨大挑战",
            ". 为软件项目引入大量第三方软件库的同时, 也必将伴随着诸如易理解性",
            "、可维护性",
            "、性能降低",
            "和构建失败",
            "等风险, 导致多样化的依赖缺陷问题.",
            "研究问题2结论总结: 现有的研究工作利用图论思想对多种程序语言软件库生态建立网络依赖模型, 涵盖了包括Maven, NuGet, PyPI, npm等在内的十几个软件中央仓库. 将上下游软件库视为节点, 软件库之间的依赖约束关系视为有向边, 其中依赖关系由版本约束范围依赖管理和依赖版本解析规则共同决定. 在开源软件库生态建模的基础上, 关于演化行为的研究也随之展开. 我们收集到的95篇研究开源软件库生态演化行为的文献大致涵盖这3个方面, 分别面向不同的程序语言社区探讨其规模增长、持续更新和复杂性的增加.",
            "在开源软件库生态多样化的异步演化行为、构建环境限制、依赖配置模式复杂性等因素的相互影响和制约下, 会导致4种常见的依赖缺陷问题: 软件版本演化的兼容性问题、软件库依赖冲突问题、冗余依赖问题与安全漏洞传播问题. ",
            "描述了演化行为与依赖缺陷问题的因果关系, 本节针对4种备受研究者关注的问题分别展开介绍.",
            "在开源软件库生态中, 软件项目与其依赖的第三方软件库分别由不同的开发者实现与维护, 因此上下游软件之间的异步演化, 时常会导致兼容性问题. 具体而言, 软件库的演化不仅包括功能的增加, 还涉及多维度属性的变更, 如方法签名、许可证和配置文件等. 从收集到的现有文献看来, 研究者近年来聚焦于软件库异步演化过程中API破坏性变更(40篇)和开源许可证相关的兼容性问题(29篇). 通过提炼文献中的相关概念和描述, 我们对软件版本演化的兼容性问题给出如下释义.",
            "问题定义: 在版本演化的过程中, API的4种变更会破坏软件库的向后兼容性, 包括API签名变更、API实现变更、API弃用和API删除. 软件项目在对第三方软件库版本升级之时, 上述变更容易引发构建或运行时刻的异常行为",
            ".",
            "问题影响: 针对软件库版本演化过程中API破坏性变更所带来的影响, 我们从生态社区和软件项目两个角度进行分析: (1) 对生态社区的影响: Brito等人",
            "的研究表明, NuGet生态是出现API破坏性变更问题最多的社区, 而问题数量排名第2和第3名的生态社区分别是npm和Maven. 其中, npm构建规则允许不同版本的同一软件库共存于软件项目中, 因此API破坏性变更在该语言社区的软件库生态上不会造成“涟漪效应”. Zhang等人",
            "发现API破坏性变更在Python框架中发生得更加频繁, 并且可以发生在软件演变的任何阶段, 而Python的动态特性和灵活性使得更改不易被发现, 因此Python框架中的API破坏性变更已经影响了广泛的客户端应用软件, Java相对来说影响较小. (2) 对软件开发者的影响: 不同的程序语言生态依赖管理机制使得开发者在API破坏性变更问题防范的意愿方面有很大的差异. 虽然软件库的开发者尽量避免API的破坏性变更, 但仍然不可避免地以演进的名义进行向后不兼容的API修改, 持续性地与技术债务作斗争. 文献[",
            "]指出, R语言的CRAN软件存储仓库与其他生态的不同之处在于, 它要求软件库开发者在提交API不兼容性修改之前通知依赖于它的软件项目, 让下游开发者按照自己的开发计划更新, 对版本号的修改更为宽容. 以此方式进行版本异步演化行为的协调, 使得开发者之间保持持续同步, 有效地避免兼容性问题. R语言开发者针对API破坏性变更的治理策略与经验, 值得向其他语言社区的开发者推广.",
            "问题类型: 根据软件库版本演化中API变更的方式, 我们将其引发兼容性问题的原因分为如下3类.",
            " API签名变更: 软件库中API签名(包括方法名, 参数类型和返回值类型)的变更, 会导致二进制不兼容或源代码不兼容: 二进制不兼容是在程序链接时出错, 源代码不兼容是程序编译时出错",
            ".",
            " API实现变更: 在软件库中API签名不变的情况下, 改变方法或字段的实现(例如前置条件、默认值), 同样也会引起向后不兼容的程序行为",
            ". Mostafa等人",
            "通过对软件库演化过程中API实现变更的研究, 根据不兼容的行为、调用条件等因素对程序向后不兼容原因进行了分类, 发现向后不兼容问题在Java软件库中普遍存在. Dig等人",
            "研究了Java社区流行框架和软件库中API实现的演化历史, 发现在80%的情况下, API破坏性变更是由软件重构操作导致的.",
            " API弃用与删除: 在软件库版本演化过程中, API的弃用与删除会导致兼容性问题, 甚至在开源软件库生态中会引发“涟漪效应”",
            ". API弃用是其删除前的警告方式, 但实际上很多软件库开发者并没有严格地给出API弃用警告信息, 从而造成软件运行崩溃的情况. Robbes等人",
            "是首先调查软件库中API变更对依赖于它的下游软件项目兼容性影响的研究者, 通过对Squeak和Pharo软件生态的研究得出结论, 由API弃用可能会对开源软件库生态造成破坏性的影响. Qiu等",
            "通过对大量Java软件项目的分析发现51.1%的弃用类、43.5%的弃用方法和18.1%的弃用字段均在实际开发中被采用, 会引发相当规模的兼容性问题. 而Sawant等人",
            "在文献[",
            "]的基础上, 又增加了对Java生态社区的研究, 证实大多数客户端软件项目不会对弃用实体做出反应, 即便做出反应, 也是倾向于通过删除有问题的API调用来解决. 同时, 他们认为, Java中API的弃用机制没有为开发人员提供正确的激励作用.",
            "在发生如上3种API破坏性变更的情况下, 为避免对开源软件库生态造成传播式影响, 开发者应遵守语义版本控制规则, 使用主版本(major), 次要版本(minor)和补丁(patch)版本号来表示API的破坏性变更, 非破坏性变更与缺陷修复的版本演化",
            ". 然而, 实际开发中软件库语义版本的更新不规范是兼容问题暴露的首要原因. Raemaekers等人",
            "及Zhang等人",
            "研究指出, 语义版本更新不正确是软件生态中的常见问题. 调查发现, 平均每个流行项目有30个向后兼容性问题, 并且在本应该满足向后兼容性的补丁版本和次要版本中出现了API破坏性变更.",
            "问题定义: 开源许可证是一种法律许可, 一般会以副本或声明的形式附带在开源软件中, 表明允许用户可以免费地使用、修改和共享版权软件",
            ". 开源许可证间最大的差异是许可证对分发衍生软件的限制性不同, 即他人对代码修改和扩展后分发的限制要求存在差别. 开源许可证按照限制的强弱通常分为3种类型: 宽松型、限制型和弱限制型",
            ". 宽松型许可证(permissive permission)对软件的再分配方式提出了最低要求, 它对衍生软件没有过多限制, 允许它成为私有软件, 如BSD系列许可证、MIT、Apache 2.0和MulanPSL-2.0. 限制型(copyleft permission)许可证条款要求对软件的修改和扩展必须按照获得软件的许可证进行开源, 如GPL系列许可证和OSL系列许可证. 弱限制型许可证要求对软件的修改和重新分发必须按照获得该软件的许可证进行开源, 然而合并这些软件的大型作品可以成为私有软件, 如MPL和EPL许可证. 在开源软件库异步演化的过程中, 随着上下游软件对许可证的添加或移除、许可证升级或降级、许可证变更等操作, 在同一个软件项目很容易引入授权条款冲突的源文件或第三方软件库, 引发许可证兼容性问题",
            ".",
            "问题影响: 结合",
            "中描述的常用开源协议条款兼容性指示图, 我们可以从两个方面描述许可证兼容性问题给软件项目带来的影响.",
            " 许可证的决定: 一般来说, 限制型许可证可以向下兼容弱限制型许可证和宽松型许可证. 在",
            "中, 用直线相连的两个许可证协议是兼容的, 箭头指向为限制性更严格的许可证, 即直线相连的许可证协议可以组合使用, 且软件项目最终的许可证取决于强限制型协议",
            ". 例如, 采纳有向路径MIT→ BSD→ Apache 2.0 → LGPL 3.0中任意两个协议的开源软件都可组合使用, 而软件项目最终的许可证取决于箭头末端的LGPL 3.0协议.",
            " 许可证的冲突: 限制条件矛盾的两个许可证协议互不兼容. 在",
            "中, 没有直线相连的两个许可证协议互不兼容, 即两种许可证不可组合使用. 例如, MPL← BSD← Apache是一个双向链路, 链路两端的MPL和Apache是不兼容的, 无法组合使用.",
            "由于许可证兼容性问题的频发性, 它给软件项目的开发者带来3个方面的影响.",
            " 法律纠纷: 开源许可证是第三方软件库的作者与软件项目开发者之间具有法律约束力的合同. 若开发者误用或误解许可证协议, 在违背法律条款的情况下使用软件库, 将会给开发组织机构或公司带来法律风险. 例如, 2017年CoKinetic公司在纽约联邦法院向Panasonic Avionics公司发起诉讼, 原因是其违反了GPL 2.0开源许可证协议. 根据CoKinetic的诉讼, Panasonic Avionics公司的软件开发基于支持GNU通用公共许可证的Linux操作系统. GNU GPL协议要求, 该许可证要求对软件的修改和重新分发必须按照GPL许可证进行开源, 然而, Panasonic Avionics公司为了打压商业竞争对手, 拒绝开源其操作系统源代码. CoKinetic声称这是故意违反GPL 2.0许可证的行为, 要求赔偿1亿美元的版权费用",
            ".",
            " 软件项目许可证的选择: 开源许可证协议是软件项目的开发者向下游用户传达软件版权的条款. 软件项目的开源许可证一旦选定, 通常不会在项目的生命周期内改变. 因此, 许可证的选择可能影响该软件项目的成败. 开发人员会时常面临软件项目许可证选择的难题",
            ". Sen等人",
            "采用效用最大化的方法研究了软件开发者对开源许可证的最优选择. 他们调查了开发者对许可证的态度, 发现在许可证的选择方面投入的思考和努力越大, 在后续演化中, 软件项目许可证不受限制的可能性就越大. 即使所有开源软件开发者都更倾向于限制型许可或弱限制型许可证协议, 这一结果仍然成立.",
            " 第三方软件库许可证的选择: 当软件项目开发者选择使用第三方软件库时, 他们必须了解软件许可证协议条款与其使用预期是否匹配. 在错综复杂的开源软件库生态依赖关系下, 来自第三方软件库的多样化许可证协议对软件项目的影响和约束变得愈发难以理解. 例如, Almeida等人",
            "针对3种流行开源许可证(GNU GPL 3.0、GNU LGPL 3.0和MPL 2.0)单独使用和组合使用的开发场景, 在375名软件从业者中开展调查. 结果表明, 只有约62%的开发者能够在42个许可证使用实例中给出与法律专家相同的判断. 尽管开发者清楚地理解单一许可证的使用影响, 但当涉及多个软件库的多种许可证时, 他们通常无法给出明确的答案.",
            "问题类型: 随着第三方软件库的引入和版本演化, 软件项目极易引入两种类型的许可证兼容性问题:",
            " 多许可证的兼容性问题: 在软件项目演化过程中, 极易从不同的源文件/第三库中引入多个许可证协议. 在多个许可证协议条款冲突的情况下, 便会引发兼容性问题. Moraes等人",
            "研究了npm生态中的多许可证现象, 分析了1552个JavaScript项目中引入的数百万个软件库, 发现大约有61%的项目使用了多于一个开源许可证. 平均每个软件项目引入4.7个许可证(最大为256个), 其中373个项目引入了一对协议冲突的开源许可证, 体现了多许可证兼容性问题的普遍性.",
            " 许可证不一致问题: 如果被下游软件项目使用的第三库许可证协议与该软件库发布的许可证协议不一致, 则会导致项目对第三方软件库的使用侵权. 造成这种不一致问题发生的原因分为两种",
            ": (1) 软件库的开发者更新了许可证协议, 然而包含其原始许可证协议的旧版本软件库依然在被下游软件项目使用; (2) 下游软件项目擅自删除或修改第三库中原始的许可证协议. 第1种许可证不一致问题, 随着第三方软件库版本的升级便可消除. 而第2种许可证不一致问题如果没有得到版权所有者的认可与批准, 便会导致侵权. 例如, 在XimpleWare公司起诉Versata软件公司的案件中, Versata被指控将GPL许可的代码包含在其产品中, 但删除了GPL要求的版权和使用协议",
            ".",
            "在收集到的领域论文集中, 12篇讨论了依赖冲突问题. 通过提炼文献中的相关概念和描述, 我们对问题给出如下释义.",
            "问题定义: 软件项目在演化过程中, 很容易以直接和间接依赖的方式引入: (1) 同一软件库的不同版本; (2) 不同软件库中的同名类; (3) 软件项目与软件库中的同名类; (4) 软件库与平台框架之间的版本范围冲突, 在构建环境的约束下, 项目只能从软件库的众多版本中仲裁并加载其中一个版本而遮蔽掉其他版本, 亦或无法安装下载的软件库版本, 从而导致构建或运行时刻的异常行为",
            ".",
            "问题影响: 依赖冲突问题对开源软件库生态的影响, 可从3个角度进行分析: (1)普遍性: 经验调查发现, 软件库依赖冲突问题频繁发生在Python、Java、C#、Rust等多个流行程序语言社区, 且平均在各自生态社区的GitHub版本维护系统中遗留数以百万计的依赖缺陷报告",
            "; (2)多样性: 依赖冲突问题的表现形式取决于软件库的不同版本在依赖配置脚本中的声明顺序、依赖树的拓扑结构、构建环境的平台版本以及构建工具的安装规则. 上述任一条件发生变化, 冲突的软件库版本被置换的方式便随之变化, 对程序行为的影响也会发生变化",
            "; (3)严重性: 依赖冲突问题可能会导致软件构建失败(例如Python和C#软件), 更有可能引发ClassNotFoundException、NoSuchMethodException等程序崩溃的异常行为或程序的语义行为发生不一致等严重后果(例如Java软件)",
            ".",
            "问题类型: 在软件项目演化过程中, 第三方软件库以及项目平台框架的升级/降级/迁移时常会触发依赖冲突问题. 如",
            "所示, 根据冲突的原因, 我们可将问题分为4种类型.",
            " 同一软件库的多个版本: 若多个版本的同一软件库以直接或间接依赖的方式引入软件项目中, 构建工具会根据特定的版本仲裁策略加载其中一个版本(Maven和pip工具的“最短路径优先”和“先声明优先”, Gradle工具的“最高版本优先”, NuGet工具的“直接依赖优先”等), 而遮蔽掉其他版本. 研究表明, 对于Java项目而言, 如果加载的版本中不包含软件项目需要调用的类或方法, 则会引发运行时刻的软件崩溃",
            "; 对于C#及Python项目而言",
            ", 若冲突软件库的安装版本不满足被遮蔽版本的依赖约束范围, 则会导致构建失败.",
            " 不同软件库的同名类: 若不同软件库中包含同名类文件, 构建工具则会加载依赖配置脚本中优先声明的类文件, 而遮蔽掉其他同名类. 若加载的类文件中缺失软件项目实际调用的方法, 则会导致运行时刻的软件崩溃",
            ".",
            " 软件项目与软件库的同名类: 若软件项目与第三方软件库中包含同名类文件, 在采用UberJar方式(将项目代码与第三方软件库打包在一起)构建项目的情况下, 第三方软件库中的类文件被加载, 而软件项目自身的同名类会被遮蔽. 同理, 如果加载的类文件中缺失被实际调用的方法, 则会导引发运行时刻的软件崩溃",
            ".",
            " 平台框架与软件库的版本冲突: 在C#, C/C++等平台框架相关的程序语言社区中, 为保证兼容性, 软件库会约束其可安装的平台框架版本. 在软件项目演化过程中, 极易引发平台框架与软件库版本的冲突, 导致构建失败",
            ".",
            "在收集到的领域论文集中, 17篇讨论了软件冗余依赖问题. 通过提炼文献中的相关概念和描述, 我们对问题给出如下释义.",
            "问题定义: 第三方软件库以直接或间接依赖的方式引入软件项目中, 但是却只有部分特性或函数被实际调用. 我们将软件项目在构建和运行过程中不必要的代码依赖称之为冗余依赖",
            ".",
            "问题影响: 冗余依赖主要为软件项目带来3个方面的影响",
            ": (1) 构建效率: 增加了构建文件的大小, 使得构建效率降低. 在存储空间有限制的小型设备上, 可能无法部署运行; (2) 维护代价: 冗余依赖为开发人员带来了更大的测试和维护代价; (3)安全风险: 冗余依赖意味着更大的受攻击面, 增加了软件项目的安全风险.",
            "问题类型: 根据代码粒度的不同, 可以将冗余依赖划分为如下3种类型.",
            " 冗余软件库: 依赖管理器通过解析软件项目依赖配置脚本中声明的直接依赖软件库, 自动化地下载并安装间接依赖软件库. 上述过程在保证项目正确构建的同时, 也会引入冗余的软件库. 目前对于冗余软件库问题的研究主要集中于Maven生态中, Soto-Valero等人",
            "对Maven生态中冗余的依赖关系进行定性和定量分析, 研究发现冗余的依赖在Java项目中非常普遍, 75.1%的软件项目均引入了冗余依赖. 也有研究发现问题发生的原因除了库开发者不合理的模块化与依赖设置外, 项目开发者使用了诸如编译、执行和测试等错误的依赖作用范围也导致了冗余依赖的引入",
            ".",
            " 冗余类文件: 软件库在演化过程中倾向于扩展现有特性与增加新特性, 导致库的体积增大, 失去了原本的功能聚焦. 然而, 实际情况下, 软件项目只会调用到第三方软件库中的部分类文件, 去除冗余的类文件依然能够保证软件的正确构建和运行. 文献[",
            ",",
            "]研究了软件项目中错综复杂的库间依赖关系、包间依赖关系以及类间依赖关系, 从而探索如何有效消除不必要的类文件. Fan等人",
            "探索了依赖配置脚本中声明的依赖与源文件中实际依赖不一致而导致的冗余依赖问题, 以提高软件的构建效率. 文献[",
            "]为减少Web应用程序中的安全漏洞代码, 而消除其中冗余且风险较高的源文件.",
            " 冗余函数/代码块: 在加载的类文件中, 也可能只有少量函数/代码块被实际调用. 因此, 有选择地删除类文件中的函数/代码块是一种更细粒度的去除冗余依赖的方式, 它允许开发者进一步缩减软件项目的体积, 而不只是保守的软件库/类文件粒度的去冗余策略. 为了满足复杂的用户需求或者为了支持不同的客户端软件, 第三方软件库实现了大量的功能特性, 使得体积日趋膨胀. Vázquez等人",
            "分析了JavaScript应用程序中捆绑的第三方软件库, 通过去除冗余的函数来提高网页的加载速度. 近期研究也分别尝试在大型浏览器",
            "、商用软件",
            "、Web应用程序",
            "和Unix应用程序",
            "中删减不必要代码或者函数来减少安全风险, 提升构建和运行效率.",
            "在收集到的领域论文集中, 90篇讨论了安全漏洞的传播问题. 通过提炼文献中的相关概念和描述, 我们对问题给出如下释义.",
            "问题定义: 攻击者时常在流行的软件库中注入恶意代码, 或者软件库中的不良设计被攻击者所利用, 以达到窃取用户隐私信息",
            "、获取不当牟利",
            "、提升权限",
            "或拒绝服务",
            "等目的. 具有安全风险的第三方软件库可能携带未被公开披露的安全漏洞, 也可能包含已知的安全漏洞, 它们随着开源软件库生态的依赖关系, 以直接或间接的方式",
            "传播进大量的下游软件项目中, 对软件项目的可信性带来威胁.",
            "问题影响: 安全漏洞的传播对开源软件库生态的影响, 可以从以下3个方面进行分析.",
            " 安全风险: 在软件项目中引入包含安全漏洞的软件库可导致大规模用户信息、密码等隐私泄露或发生异常行为, 造成重大事故或经济损失. 例如, OpenSSL开源密码库在2012年公开纰漏的Heartbleed漏洞使得24%–55%使用网络传输层安全协议的流行网站受到攻击",
            ". 安全漏洞允许攻击者远程访问私钥和密码, 导致用户信息泄露",
            ". 此外, 攻击者可以通过替换广告库, 从应用开发者方面添加恶意功能, 从应用用户方面窃取信息, 造成经济损失",
            ". 研究表明, 约50.6%的安全漏洞是在公开宣布后才修复的, 这可能会增加其被攻击者利用的可能性",
            ".",
            " 影响范围: 流行的软件库不仅会影响直接依赖于它的软件项目, 还会以传递性依赖的方式影响到大量的下游软件",
            ". 根据Zimmermann等人",
            "的调查表明, 在开源软件库生态中, 单一软件包平均影响了230个下游软件, 排名前5的软件库分别影响了134774–166086数量不等的下游软件, 最终成为生态级别的安全漏洞问题. 由于传递性依赖的数量远远大于直接依赖软件库的数量",
            ", 目前在多个程序语言开源软件库生态中均造成了大规模的安全漏洞传播",
            ".",
            " 修复代价: 对于软件项目开发者而言, 安全漏洞问题的修复方案可能是: (1) 升级/降级直接或间接引入安全漏洞的软件库",
            "; (2) 迁移到具备相似功能的可靠软件库",
            "; (3) 开发者自己修复漏洞并维护软件库",
            ". 大部分的安全漏洞可以使用更新直接依赖的方式解决, 然而第三方软件库的更新或迁移可能会引入兼容性问题(详细内容可见“6.1.1 API破坏性变更的兼容性问题”), 需要开发者付出更大的努力来测试",
            ". 对于服务关键业务功能的大型企业软件系统, 任何更改都可能会导致系统停机, 并带来不可预见的损失和风险.",
            "问题类型: 根据软件库中的安全漏洞是否被公开披露, 我们将问题分为如下两种类型.",
            "● 0-Day安全漏洞: 软件库中可被攻击者利用的未被公开披露的安全漏洞. 0-Day安全漏洞的常见攻击手段包括: (1)攻击者加窃取了软件库开发者凭证, 恶意地注入漏洞代码",
            "; (2) 攻击者将自己开发的漏洞软件库伪装成与流行软件库相似的命名",
            "; (3) 攻击者利用流行软件库自身包含的漏洞代码特点进行攻击",
            ". 常被攻击者利用的漏洞代码包括: ① 字段暴露",
            ": 通过方法调用读取或修改私有字段; ② 权限过度",
            ": 访问过多的方法或数据; ③ 生命周期滥用",
            ": 服务注销之后(或在服务注册之前)可对对象进行访问; ④ 拒绝服务",
            ": 阻止客户端或服务器的正常访问.",
            "● 1-Day安全漏洞: 软件库中可被攻击者利用的已经公开披露的安全漏洞. 当软件库中的安全漏洞被披露时, 开发者可能会延迟发布补丁版本, 亦或发布的补丁版本由于上游软件的更新滞后而阻塞在开源软件库依赖链路中, 依然对软件项目造成安全威胁",
            ".",
            "研究问题3结论总结: 在开源软件库生态多样化的异步演化行为、构建环境限制、依赖配置模式复杂性等因素的相互影响和制约下, 会导致4种常见的依赖缺陷问题, 现有文献对其开展了深入研究: (1) 软件版本演化的兼容性问题(包括API破坏性变更39篇和开源许可证相关的兼容性问题28篇); (2) 软件库依赖冲突问题(11篇); (3) 冗余依赖问题(12篇); (4) 安全漏洞传播问题(80篇).",
            "围绕前文介绍的4种依赖缺陷问题, 我们综述其相应的检测及修复技术.",
            "在开源软件库生态的宏观视角下, 在软件库异步演化的过程中, 鼓励开发者使用语义版本控制规则来标识兼容性变更是有效地对抗API破坏性变更问题的治理策略",
            ". 然而, 对语义版本控制规则的尊重程度可能因不同程序语言生态的特性和开发者的行为而异",
            ". Bogart等人",
            "的研究说明“长期稳定”是Eclipse 社区的核心价值观, 不允许打破变化; npm社区重视上游开发者的“轻松部署”, 接受破坏性变更, 并且对快速变化持开放态度; CRAN社区则倾向于与最新版本软件库之间的兼容性, 核心价值是使客户端项目可以轻松地安装最新的库版本. 近期研究",
            "表明, 受到生态社区价值观的影响, 总体看来API通常是不稳定且向后不兼容的, 同时API破坏性变更的情况随着时间的推移呈现显著增加趋势",
            ". 在软件库API破坏性变更频繁地引发兼容性问题的现象背后, 开发者和维护者都在不断地做出回应, 研究人员对治理技术的探索也在不断地深入. 如",
            "所示, 针对API变更的不同方式, 我们综述其相应的治理策略.",
            "(1) API签名变更兼容性问题的治理技术. 观察、理解与分析软件库演化过程中API的实际变更方式, 是有效地检测、修复和预测API变更问题的理论基础. Wu等人",
            "提出了工具ACUA自动化地分析Eclipse和Apache社区中22个开源框架的版本演化, 以识别相邻两个版本间的API签名变更. 在此基础上, 他们提出了能够有效降低API签名变更对开源软件库生态影响的若干编码规范. He等人",
            "和Liu等人",
            "通过调查不同Android平台版本与海量Android应用的演化历史, 识别Android平台版本引入的新类型、新方法以及新属性. 然而, 目前Android社区的软件库仅支持23%所有的演化特性, 导致兼容性问题频繁发生.",
            "在了解软件库中API签名变更常见模式的基础上, 研究人员开发了一系列有效的工具帮助软件项目开发者检测以及修复兼容性问题. Zhang等人",
            "针对Python社区中API演化的特点, 开发自动化工具通过静态分析捕捉API重命名、参数增删/类型变更/声明顺序变更、参数默认值变更等因素导致的兼容性问题. 当客户端软件项目需要适配软件库中的API签名变更时, 面临的主要挑战是如何在软件项目中定位到受变更影响的API调用. Muller等人",
            "面向JavaScript软件项目, 提出一种用于表示API访问点的简单模式语言和基于轻量级静态分析的模式匹配工具来解决这一难题. Nielsen等人",
            "开发工具Jsfix, 借助于静态分析来定位API破坏性变更影响的位置, 进而建议开发者对定位的代码进行适配, 使其与新版本的库兼容. Ochoa等人",
            "面向Java软件项目提出了一个静态分析工具Maracas, 来计算软件库的两个版本之间的API破坏变更集合, 进而在客户端软件项目中检测受到这些变更影响的代码位置. Ponomarenko等人",
            "面向C/C++软件项目开发工具Api-compliance-checker自动化检测API签名变更引起的兼容性问题. 与现有方法不同的是, 除了分析软件库二进制文件中的符号外, 还通过比较从软件库头文件中解析的函数签名和类型定义来验证广泛的向后兼容性问题. Dietrich等人",
            "调查发现, 当整个软件项目被编译和测试时, 客户端代码和它使用的第三方软件库之间的一致性会在构建时被检查. 然而, 只通过重新部署已演化的软件版本来部分升级软件项目, 会导致构建工具跳过这些关键的验证步骤. 针对这一问题, 他们调查了编译器和虚拟机中用于处理软件库API的提供者和使用者之间契约的不同规则集, 以检测在这种场景下API签名变更引发的兼容性问题.",
            "(2) API实现变更兼容性问题的治理技术. 即使API签名在软件库的版本演化中保持相同, 该方法内部实现的变更也有可能会引发不兼容的程序行为. 为准确地捕捉上述问题, Mostafa等人",
            "对Java软件项目的相邻版本开展研究, 发现采用回归测试检测到的大多数程序行为不兼容都是由于返回变量/字段的赋值变化或异常引起的. 文献虽然对API实现变更引发兼容性问题开展了深入探索, 但是基于人工测试Java软件项目历史版本的研究结论难以泛化或扩展到其他软件项目中. 在此基础上, Chen等人",
            "提出了Debbi技术, 利用IR模型(information retrieval models)和MMR算法(maximal marginal relevance), 开展跨软件项目之间的测试验证. 将检测问题转化为信息检索问题, 实现更高效率更广范围的检测程序行为的不兼容.",
            "(3) API弃用与删除引发兼容性问题的治理技术.Wang等人",
            "系统地调查了Python社区中API弃用问题的现状, 以全面了解: ① 开发者是如何在源代码中声明或者在开发文档中注明被弃用的API; ② 软件库的使用者如何处理被弃用的API. 在此基础上, 为Python社区中API弃用问题的治理方式, 提出了建设性意见. 结果表明, 多数情况下, Python软件库中对API弃用的处理不妥当, 开发者仅采用临时策略来进行声明, 极易引发兼容性问题. 研究人员强烈建议Python社区能够开发一种通用的面向软件项目开发者和软件库贡献者的API弃用范例. Brito等人",
            "深入调查了622个Java和229个C#软件项目中弃用API的治理策略, 结果表明66.7%和77.8%的API在弃用时开发者都及时注明了替换API的信息. 在替换API的提供策略方面, Java和C#软件对API弃用的管理显著优于Python社区. 在软件库贡献者未提供弃用API替换信息的情况下, 文献[",
            "-",
            "]呼吁研究人员开发自动化弃用API管理工具, 通过挖掘下游软件开发者对弃用API解决方案的历史记录, 来推断与之对应替换API信息.",
            "German等人",
            "、Di Penta等人",
            "、Scacchi等人",
            "和Tuunanen等人",
            "做出了奠基性的研究工作, 帮助开发者自动识别软件项目中引入的多样化许可证协议. Kapitsaki等人",
            "开发了工具findOSSLicense向软件项目开发者推荐适当的许可证协议. 在此基础上, 面向不同类型许可证兼容性问题的治理技术研究才陆续开展.",
            "(1) 多许可证兼容性问题的治理技术. 为有效地避免由第三方软件库使用而引入的多许可证兼容性问题, 构建工具应当为开发者提供有效的许可证分析技术",
            ". Kapitsaki等人",
            "对现有的开源许可证分析工具进行评估对比, 发现工具的能力大致分为3种类别: ① 从源代码或二进制代码中提取许可证信息; ② 解析代码仓库中的软件元数据; ③ 许可证兼容性建模与相关推理操作. 作者通过形式化描述兼容性问题, 详细地阐述了现有工具和技术在许可证选择决策中的作用, 为软件开发者提供了引导.",
            "采用不同开源许可证的软件库间依赖关系很容易引发兼容性问题. 文献[",
            "]中开展了关于GPL许可证与其他开源许可证组合使用的实践调查. 结果发现, 目前开源软件开发者已经找到了很多有趣的方法来创建GPL软件的衍生制品, 使得发布的软件制品可以在法律上规避GPL协议的限制. 文中记录了这些方法, 并警示开发者开源许可证正在以复杂且意想不到的方式相互作用.",
            "Kapitsaki等人",
            "的研究通过检查软件库之间数据交换的结构来捕获许可证兼容性问题, 以帮助软件项目开发者找到第三方软件库之间的正确组合使用方式. 研究人员还通过开源社区中代表性的案例详细地阐述了软件产品中许可证检测的复杂性和模糊性. 最终提供了工具SPDX-VT, 在许可证使用和兼容性方面, 为软件的自动化分析提供技术支持.",
            "Xu等人",
            "开发了工具LiDetector, 可以提取和解释开源软件许可证(包括官方许可证和自定义许可证), 并检测这些许可证之间的许可证不兼容性. 具体来说, LiDetector引入了一种基于学习的方法, 从任意许可中自动识别有意义的许可条款, 并使用概率上下文无关语法(probabilistic context-free grammar, PCFG)来推断不兼容性检测的权利和义务.",
            "近年来也涌现出采用形式化建模的方式来检测多许可证的兼容性问题的系列研究工作",
            ".",
            " 软件库-许可证依赖图. German等人",
            "将软件项目中第三方软件库的依赖关系与其声明的许可证相结合, 来进行问题诊断. 利用该模型, 在Linux的Fedora操作系统社区进行了大规模实证研究, 结果表明: (1) 软件库声明的许可证协议与其源代码文件声明的许可证存在不一致; (2) 上下游软件库之间许可证协议存在相互冲突. 在工作",
            "的基础上, German等人",
            "进一步改进了建模方式, 将软件项目抽象成一个以软件库为节点, 软件库间依赖关系为边的有向依赖图. 值得注意的是, 模型中的软件库是多种粒度(方法、类或模块)的软件制品, 每个软件库均有各自声明的许可证协议; 模型中的边能够描述包括链接、I/O重定向与管道、继承和进程间通信这4种类型的软件库间交互关系. 该模型形式化描述了现代软件集成不同许可证软件库的模式, 也通过实证研究证明了法律协议对应用程序架构的影响. 此项研究旨在让缺乏法律专业知识的软件从业者可以使用这些文档化的模式来理解和解决重用具有不同或可能相互冲突许可证的软件库所涉及的法律问题.",
            "文献[",
            "]提出了一种建模方法, 同样以软件库为节点, 而模型中的软件库可以为源代码软件库、二进制软件库、软件服务、API和配置的子系统; 边定义为系统构建时的动态链接及客户端-服务器链接. 基于上述模型分析多许可证之间的不兼容问题, 并对许可证的选择提出建议. 指导开发者在这样的部署环境中获取、集成并开发开源软件.",
            " 构建依赖图. 文献[",
            "]提出了通过跟踪构建时发生的系统调用来建模依赖图CBDG (concrete build dependency graph)的方法. 模型记录构建过程中每一步都读和写了哪些文件. 具体来说就是追踪操作系统的调用, 即在构建过程中用户进程对操作系统内核的调用. CBDG的节点分为任务节点(构建过程中的步骤)和文件节点(构建过程中读取或创建的文件), 并为CBDG中的文件节点注释上它们各自的许可证, 最终通过分析CBDG来识别客户端软件项目中的多许可证下的兼容性问题.",
            "(2) 开源许可证不一致问题的治理技术. 通常情况下, 源文件的许可证声明只能由其版权所有者修改, 除非得到著作权人的许可或许可条件的允许, 否则开发者的擅自修改将会面临潜在的法律风险",
            ". Wu等人",
            "是领域内首先对许可证不一致问题进行深入调查的研究人员. 通过实证研究, 他们对许可证不一致问题给出了描述和分类: ① 两个文件中只有一个包含许可证: 通常由许可证的增加或删除引起的问题; ② 两个文件包含同一许可证的不同版本: 通常由许可证的升级或降级导致的问题; ③ 两个文件包含不同的许可证: 通常由许可证变更引起的问题. 文中开发了一种针对上述问题的自动检测技术, 并将其应用于Linux Debian 7.5中, 发现了很多许可证不一致现象, 以此引起开发者的关注.",
            "在此基础上, Wu等人",
            "对数据集进行了扩展, 在Debian 7.5和GitHub上的10514个Java软件项目中检测许可证不一致问题, 也发现了同样的现象. 在文献[",
            "]中, 他们进一步调查了许可证不一致的演化模式, 并将他们的检测方法应用于Debian 8.2和Debian 7.5. 在两个版本中捕捉到4062组许可证不一致问题, 其中, 2701组只存在于Debian 7.5中, 2947组只在Debian 8.2包含. 通过观察对比两个版本, 发现大部分许可证不一致都可以通过升级上游软件库的版本而解决.",
            "此外, 为了解决多许可证兼容性问题和许可证不一致问题, 有时也可通过定义许可证例外, 来为许可证的使用添加特定条件. 例如GNU许可证定义了GCC运行环境库的例外, 目的是允许开发者使用GCC编译非GPL的软件, 前提是他们不在编译器中使用专有的插件或其他扩展. Vendome等人",
            "对超过5万个开源软件项目的演化历史进行了大规模实证研究, 定量地调查已知许可证例外的流行度并识别新的许可证例外. 他们通过机器学习模型, 面向6种程序语言软件中的许可证例外定义进行识别和分析, 在其中5种程序语言软件的298个文件中发现了14种不同的许可证例外类型, 它们有效地解决了许可证兼容性问题.",
            "在面向Java",
            ", Python",
            ", C#",
            "和Go",
            "等多种程序语言依赖冲突问题的系列工作中, 研究人员发现并总结了开发者经常采纳的6种问题修复的原子操作: (1)重命名冲突的类文件, 使得多个版本的类文件可以同时被加载; (2)调整软件库在依赖配置脚本中的声明顺序, 使得包含全部被调用方法的版本可以优先被加载; (3)升级或降级软件库的版本以化解冲突; (4) 定制类的加载器, 使用不同的加载器加载冲突的类; (5)升级或降级平台框架的版本以化解与软件库的版本约束冲突; (6) 对于没有找到合适修复方案的问题, 开发者请求上游软件库的开发者协调版本以化解冲突. 如",
            "所示, 我们详细介绍面向不同程序语言生态的依赖冲突问题检测与修复方法.",
            "(1) Java依赖冲突的治理技术: Wang等人",
            "通过对Apache社区中真实依赖冲突的案例实证研究, 阐述了依赖冲突问题的普遍性和严重性. 系统地总结了在Maven构建规则下依赖冲突问题发生的原因、表现形式和修复策略. 结合软件库依赖解析技术、程序静态分析与实践调查经验, 开发了自动化工具Decca, 来帮助开发者诊断软件项目依赖冲突问题的严重等级(是否会引发软件崩溃)以及修复和维护的成本. 在此基础上, 又进一步设计了工具Riddle",
            "和Sensor",
            ", 借助条件变异等程序分析策略自动化地生成测试用例, 帮助开发人员自动化地触发依赖冲突引发的软件崩溃以及语义行为不一致问题, 并收集堆栈记录等问题诊断信息. 工具LibHarmo",
            "针对多模块的Java项目, 自动化检测并帮助开发者修正每个子模块中对软件库版本声明不一致的问题, 以有效地避免依赖冲突问题.",
            "(2) Python依赖冲突的治理技术: Python语言的依赖管理使用版本约束范围来引用第三方软件库, 根据构建工具pip的安装规则, 只选择安装满足软件库约束范围的最新版本. 这就意味着, 即使软件项目的依赖配置脚本不发生更改, 软件库的依赖拓扑结构也会随着直接或间接依赖软件库的版本更新而发生动态演化. 这样的软件库依赖树的自演化行为, 时常会引发依赖冲突问题",
            ", 并且依赖冲突会伴随开源软件库生态的依赖关系导致到众多下游软件项目的构建失败. Wang等人",
            "为了捕捉上述问题, 开发了工具Watchman对Python开源软件库生态的依赖关系进行建模, 并持续增量式地监控生态中任意软件库的版本演化及其引发的依赖冲突.",
            "(3) C#依赖冲突的治理技术: 在.NET平台版本严重碎片化的背景下, 同一软件库的相同版本在不同.NET平台环境下可能会引入不同的传递性依赖软件库; 同一软件库的不同版本可能会兼容不同的.NET平台环境, 也可能会引入对.NET平台版本限定不同的传递性依赖软件库. 因此, 在对第三方软件库亦或.NET平台版本升级之时, 时常引入互不兼容的库版本组合, 带来“依赖地狱”问题. 通过挖掘C#软件库依赖管理配置文件的变更历史, Wang等人",
            "通过经验调查发现在近1万次第三方软件库版本的修改记录中, 为升级其中一个软件库版本, 平均要协同升级或降级35个其他软件库才能化解软件库依赖树的兼容性问题, 最终得到可以共存的软件库版本组合. 为此, 他们开发了工具Nufix, 利用二进制整数线性优化模型帮助开发人员生成符合他们配置偏好的最优软件库版本组合方案.",
            "(4) JavaScript依赖冲突的治理技术: JavaScript是一种不提供任何显式命名空间或模块的语言, 这意味着项目中不同的第三方软件库可能会共享同一个命名空间. 因此, 若不同的第三方软件库经常对全局空间的同一位置进行写操作, 这可能导致一个软件库的API被另一个软件库所修改甚至覆盖. Patra等人",
            "通过对真实案例的研究, 总结了4种依赖冲突的类型, 同时显示了这种冲突在JavaScript项目中的普遍性. 为此, 他们开发了工具ConflictJS",
            ", 通过对库在全局命名空间的写操作进行动态分析, 识别潜在的依赖冲突, 并在不同的客户端比较库的行为来验证依赖冲突.",
            "(5) Go依赖冲突的治理技术: 为了避免引入依赖冲突问题, 自2018年起, Go语言软件生态正在经历依赖配置模式的迁移, 从原始的GOPATH依赖管理模式逐步迁移到新Go Modules模式. 然而由于这两个依赖管理模式互不兼容, 同时Go语言社区中近60%的软件由于不支持语义版本发布规则、过度依赖第三方依赖管理器等原因依然停留在GOPATH依赖管理模式. 上述依赖配置模式演化会引发兼容性问题的3种常见场景: GOPATH模式的项目依赖Go Modules模式项目、Go Modules模式的项目依赖GOPATH模式项目以及Go Modules模式的项目依赖Go Modules模式项目时发生的兼容性问题. Wang等人",
            "开发了工具Hero帮助开发者全面分析与诊断由于上下游软件采用异步的依赖管理模式引发的兼容性“冲撞”.",
            "(6) C (Linux社区)依赖冲突的治理技术: 在Linux安装环境中, 时常会引入版本约束范围相互冲突的软件库组合, 无法同时进行安装. Artho等人",
            "通过调查Linux主流发行版Debian、RedHat社区的缺陷跟踪系统, 筛选并分析其中关于依赖冲突的错误报告, 指出在RedHat中存在一种特殊的冲突, 即支持32位和64位不同架构的同一软件库, 引入到同一安装环境内带来的依赖冲突. 此外, 他们总结了几种频发的冲突类型, 包括资源冲突、配置冲突、软件库之间的版本约束冲突以及由于库演变产生的方法级别的冲突等. DistCheck",
            "能够识别软件仓库中无法安装的软件库, 提供详细的信息来帮助开发人员理解问题的原因以及推导出修复方案. DebianWheezy",
            "则是通过软件库依赖关系的元数据来预测软件库在Linux操作系统环境下的可安装性. 针对Linux社区中存在的依赖冲突, Vouillon等人",
            "开发了一种新技术, 使用语义保留的图论转化方法, 将大型软件仓库中的共安装问题化简到一个小型依赖图中. 同时, 他们提供了工具OCaml",
            ", 用于检测原本可以共同安装的软件库集合, 由于其版本的升级而引发依赖冲突问题, 同时提供丰富的依赖图谱对问题的修复方案进行说明.",
            "针对不同粒度的冗余依赖问题, 现有的研究通过解析源代码/字节码和依赖配置脚本, 利用静态分析和动态测试等方式进行有效的检测与修复(如",
            "所示).",
            "(1) 冗余软件库的治理技术: 文献[",
            ", ",
            "]提出的技术, 均通过静态分析Maven软件项目的字节码来检测并删除冗余的第三方软件库. DepClean",
            "通过解析软件项目的第三方软件库依赖树获取引入的软件库, 通过构建静态调用图来标识软件项目实际调用的软件库, 进而返回软件库使用状态的诊断报告, 同时生成去除冗余依赖依赖配置脚本. Jezek等人",
            "开发了一个静态分析工具, 首先利用类加载器收集非私有类及其非私有成员, 以此来识别实际使用的软件库. 进一步通过分析类的字节码来收集项目引入的软件库. 最终通过对比两个软件库的集合, 得到冗余依赖信息.",
            "(2) 冗余类文件的治理技术: veriBuild",
            "使用设计的统一依赖图(UDG), 利用静态和动态分析技术来统一编码构建声明和实际调用的类依赖关系, UDG的构造使得可以通过图遍历的方式来检测依赖错误. de Matos等人",
            "提出了一种库分割技术, 他们挖掘并建立了依赖于流行开源软件库的Java软件项目数据集. 根据流行软件库中类被调用的情况, 计算Java项目的相似性矩阵, 进而对软件库的类文件进行聚类. 目的是将软件库分割成更小的粒度, 以去除下游软件项目的冗余依赖. Viseur等人",
            "的工作通过构建类间依赖图, 计算4种反模式实例, 以确定可以被删除的依赖边. 将源代码解析为抽象语法树, 以验证是可以删除或重新组织这些依赖, 进而对软件项目的结构进行重构.",
            "(3) 冗余函数/代码块的治理技术: Azad等人",
            "关注于Web应用程序中冗余代码的消除, 通过不同技术的组合来模拟应用程序的使用, 利用XDebug记录模拟期间触发的代码行、函数和类文件信息以评估代码删除的风险. Slimium",
            "首先定义了164个安全漏洞相关的特性, 进而构建“代码-特性”映射关系. 在此基础上, 通过跟踪和分析用户访问对网站的动态访问行为, 获取执行函数列表, 最终去除容易引入安全风险的冗余函数. Nibbler",
            "通过对给定的C语言共享库进行反编译操作, 构造整个项目的函数调用图, 进行不可达代码检测. 借助于AT (address-taken)函数剪枝算法迭代分析, 最后删除所有未使用函数. UFFRemover",
            "定义了未使用的外部函数(UFF), 并通过对JavaScript源码进行静态分析识别出需要的模块以及其中的引入的函数, 同时对源代码进行执行跟踪, 检测得出UFF列表, 在软件库中删除对应的函数. Razor",
            "利用软件项目的测试用例执行并跟踪程序, 构建启发式扩展控制流图. 进而根据扩展控制流图来重写原始的字节码, 以生成支持所需功能的最精简版本. Chisel",
            "将待缩减的代码和所需功能的高级规约说明作为输入, 输出为符合规约说明的代码简化版本. Chisel通过使用一种新的基于强化学习的方法, 大大改进了现有的程序简化系统, 加快了对简化程序的搜索, 并将其扩展到大型软件的分析中. Soto-Valero等人",
            " 利用软件项目捆绑的测试用例及测试覆盖率度量工具JaCoCo来精确捕获在特定工作负载下运行时会调用软件自身及其第三方软件库的哪些函数及代码块.",
            "此外, 2022年也涌现出关于软件库依赖“坏气味”检测与分析的研究",
            ", 均将冗余依赖定义为影响软件依赖管理与维护的不良设计, 类似软件“坏气味”与重构理论, 建议开发者对其进行优化.",
            "针对软件库中的0-Day安全漏洞和1-Day安全漏洞, 我们综述其相应的治理技术(如",
            "所示).",
            "● 0-Day安全漏洞的治理技术. 0-Day安全漏洞的治理通常是由安全研究人员对开源生态中的软件库进行扫描分析, 检测出安全漏洞并公开披露给CVE (common vulnerabilities and exposures)组织机构. 0-Day安全漏洞检测的关键技术包括代码特征提取与表示、污点分析、动态测试和机器学习.",
            "(1) 代码特征提取与匹配: Pham等人",
            "的实践调查表明, 随着软件重用, 大量的安全漏洞会在开源软件库生态中重复出现. 为检测重复出现的安全漏洞, 他们开发了工具SecureSync, 将漏洞代码片段表示成抽象语法树(AST), 进而在不同的软件中进行结构特征的相似度匹配. Duan等人",
            "调查发现, 软件项目依赖管理器也经常被攻击者利用来分发恶意第三方软件库, 给用户带来严重的安全威胁. 他们提出了一个分析框架来提取解释型语言依赖管理器的功能和安全特征, 进而结合控制流和数据流分析来研究注册表滥用问题. Hu等人",
            "为检测安卓应用中的第三方软件库是否被攻击者所恶意篡改, 分别提取出原始软件库和应用软件库中的类文件结构信息作为“特征摘要”, 进而通过相似度匹配的方式进行验证. Vu等人在文献[",
            "]中指出, Python源代码在最后打包分发的过程中, 容易受到攻击者的恶意篡改. 针对这一问题, 他们开发了工具LastPyMile来对比源代码和分发软件包的特征差异, 以检测被注入的恶意代码.",
            "(2) 污点分析: 通过分析数据流来判断源代码中哪些变量可能会受到攻击, 是第三方软件库安全漏洞检测的关键. 污点分析技术就是分析程序中由污点源引入的数据是否能够不经无害处理, 而直接传播到污点汇聚点. 如果不能, 说明软件是信息流安全的; 否则, 说明软件产生了隐私数据泄露或危险数据操作等安全问题. 文献[",
            "]和文献[",
            "]分别提出了静态污点分析和动态污点分析来检测面向服务的Java软件和NodeJS软件的安全漏洞. Goichon等人",
            "认为, 与动态分析技术相比, 静态污点分析有更好的非侵入性、精确性和更大的覆盖范围.",
            "(3) 动态测试: Bhoraskar等人",
            "提出一种新的GUI测试的方法来精准地触发第三方软件库中的代码, 以检测应用程序中的广告库是否违反了用户隐私信息保护法. 为避免穷举测试, 他们首先利用静态分析构建安卓应用的页面调用图, 剪枝出软件库的程序执行路径进而通过动态测试的方法触发其执行.",
            "(4) 机器学习: Sejfia等人",
            "通过机器学习技术来学习恶意代码库的特征, 同时结合代码克隆检测技术来识别被分类器遗漏的恶意代码库. 他们开发的轻量级的工具Amalfi只需要几秒钟来提取代码库特征并运行分类器, 识别出了大量以前未知的恶意软件库样本.",
            "● 1-Day安全漏洞的治理技术. 对开源软件库生态中已知安全漏洞的治理技术可分为漏洞库的检测、传播影响分析、智能预警、修复代价评估与可达性分析这5个方面.",
            "(1) 漏洞库的检测技术: 由于安卓应用通常与第三方软件库一同打包发布, 导致用户很难从应用中识别出第三方软件库名单及其版本号, 因而难以判断应用是否引入了漏洞库. 为避免安全风险, 近年来涌现了一系列面向安卓应用的第三方软件库检测技术. 第三方软件库检测算法整体上分为两种类别.",
            "① 基于白名单的第三方软件库检测方法: 该类方法需要建立一个流行度较高的软件库标准集, 进而在反编译的安卓应用中, 将第三方软件库与标准集中的软件库名称进行匹配. Li等人",
            "提出一种从海量安卓应用中根据第三方软件库的使用频次来提取公共软件库的方法. 最终在GooglePlay的大约150w个应用中收集到了1113通用库和240个广告库的白名单, 用于实现第三方软件库检测. 然而, 事实上软件库的重命名和第三方软件库的混淆技术, 极大地影响了该方法的有效性. 此外, 白名单一般结合手动分析生成, 必须经常保持更新, 所以很难生成全面的第三方软件库列表.",
            "② 基于特征识别的第三方软件库检测方法: 该类方法首先根据安卓应用的包结构或类间依赖结构解耦成不同的软件库, 这些软件库被视为候选库. 进而提取出软件库的特征信息与构建的软件库标准集做特征匹配, 最终确定其第三方软件库的名称及版本号. Woo等人",
            "在实现上述第三方软件库检测技术时, 融入了冗余代码的消除技术, 并使用哈希函数加快了特征匹配效率. 该项技术在数十万个开源应用的800亿行代码的评估测试中, 均取得了较高的准确率和召回率. Titze等人",
            "提出了Ordol方法, 侧重于提取语义暴露的特征, 以一种抗混淆的方式检测应用程序中的软件库版本. Liu等人",
            "关注于广告库的特征, 提出Pedal工具将广告库与安卓应用程序分离. 为应对混淆安卓应用程序, Huang等人",
            " 开发了一种可扩展的两阶段检测方法Libloom, 并提出一种新的基于熵的度量来专门处理重新包装和扁平的应用. Zhan等人在文献[",
            "-",
            "]中对比评估了主流的第三方软件库检测技术LibExtractor",
            "、LibRoad",
            "、LibID",
            "、LibPecker",
            "、ORLIS",
            "、Han等人",
            "、OssPolice",
            "、LibD",
            "、LibScout",
            "、LibRadar",
            "、LibSift",
            "和AdDetect",
            ". 结果表明: (a) 大多数的检测技术基于包结构来对第三方软件库软件库解耦, 无法对抗代码混淆技术; (b) 在特征提取阶段, 如果包含更丰富的语义信息(例如, 类的依赖关系), 就能够对软件库重命名和代码混淆有更好的处理能力; (c) 现有工具通常召回率很低, 因为算法设计忽略了安卓应用和软件库的一些特色属性, 配置模式和编译机制等; (d) 现有技术的能力通常是互补的, 结合各个算法的优势可以建立一个更好的工具.",
            "除面向安卓应用的第三方软件库检测技术外, 近年的研究也同样涌现出针对Linux社区的Java软件",
            "、C软件",
            "和iOS应用",
            "的第三方软件库版本检测技术, 以追溯安全漏洞的传播影响.",
            "(2) 漏洞库的传播影响分析: 漏洞库在多种程序语言的开源软件库生态中均广泛传播. 研究人员针对上述问题开展了多维度的实证研究, 从不同角度对漏洞库的传播现状、规律和影响进行了总结和讨论. 文献[",
            ", ",
            ", ",
            ", ",
            ", ",
            "-",
            ", ",
            ", ",
            "]针对Java、npm、PyPI等流行语言软件项目、GitHub开源项目以及Docker容器项目进行调查分析, 结果表明, 软件项目中至少1/3的第三方软件库包含严重等级较高的安全漏洞. 造成上述现象的原主要原因是: ① 安全漏洞被延迟披露, 亦或在披露后漏洞库的开发者延迟漏洞修复; ② 软件项目开发者对第三方软件库的版本更新滞后.",
            "针对安全漏洞被延迟披露/漏洞库的开发者延迟漏洞修复问题, 文献[",
            ", ",
            ", ",
            "]进行了深入分析. 文献[",
            "]指出, 很多漏洞库已经不再被维护, 导致软件项目开发者没有修复版本可引用. Prana等人",
            "在Java、Python、Ruby开源项目的实证研究中发现, 安全漏洞大约在被披露后的3–5个月才被软件库开发者所修复. Alfadel等人",
            "在PyPI生态中调查发现, 软件库引入的安全漏洞平均需要3年以上的时间才会被开发者发现和披露, 漏洞库被发现时已经大约影响了68%的版本, 并且51%的漏洞库在信息公开之后才会发布相应的补丁版本. 然而, 在npm生态中, 漏洞库被修复延迟的现象并不明显, 大多数安全漏洞(82%)在披露时就已经发布了补丁版本.",
            "针对软件项目开发者对第三方软件库的版本更新滞后问题, 文献[",
            ", ",
            ", ",
            ", ",
            ", ",
            ", ",
            "]开展了进一步的实证调查, 发现不同程序语言生态的更新滞后状况有所差别. Yasumatsu等人",
            "发现在安卓生态中, 近一半的软件库在发布最新版本后, 至少需要3个月的时间才会被开发者采纳, 其余软件库的滞后时间甚至要达到10个月以上. Decan等人",
            ", Zerouali等人",
            "和Launinger等人",
            "在npm生态的研究中, 得到了相近的结论, 软件库的版本更新滞后时长平均在7–9个月之间. 相比之下, RubyGems生态中, 只有10%的软件库版本更新时间在90天以上, 半数之上的漏洞库可以在被披露后的一周内更新.",
            "此外, 在文献[",
            "]中, 作者结合混合程序语言分析技术调查证实: C语言第三方软件库的安全漏洞已经随着依赖关系, 大量传播进Python和Java开源软件生态中.",
            "(3) 漏洞库的智能预警技术: 通过漏洞库的跟踪与智能预警来及时提醒软件开发者更新到软件库的补丁版本, 能够极大程度地阻断安全漏洞的传播影响. 文献[",
            ", ",
            ", ",
            "]的实证调查表明, 开发者希望漏洞库检测工具能够提供细粒度的漏洞警告, 即只针对程序执行路径能够触发到的漏洞代码发出预警. 然而, 目前学术界(如Vulas",
            "和VAS",
            ")和工业界(如Black Duck",
            "、GreenKeeper",
            "、Snyk",
            "和SourceClear",
            ")的漏洞库预警系统均只结合开源软件库的依赖关系与安全漏洞数据来提示软件项目是否引入漏洞库, 无法提供API粒度的分析. 为解决上述问题, Wang等人",
            "、Boldi等人",
            "和Huang等人",
            "开发了智能预警系统原型, 一方面通过构造软件项目对第三库API的调用图, 并检查API是否存在于漏洞数据库, 来判断安全漏洞的可达性. 另一方面通过统计漏洞库补丁版本中API的变更次数来评估软件项目的修复代价, 以便开发者在更新第三方软件库版本之时给出修复建议.",
            "软件成分分析(SCA)工具越来越多地被软件开发者采用来检测与警告漏洞库. Dann等在文献[",
            "]评估了工具OWASP Dependency Check、Eclipse Steady、GitHub Security Alerts和3个商业工具Snyk、Black Duck、WhiteSource在漏洞警报方面的能力. 而Imtiaz等人",
            "以大型Web应用程序作为案例, 比较了9个行业领先的SCA工具生成的漏洞报告. Chen等人",
            "通过从大量漏洞信息源中识别漏洞信息相关度, 以辅助SCA工具构造漏洞数据库. 结果表明, 现有的SCA工具都存在一定程度的漏报. 文献[",
            ", ",
            ", ",
            "-",
            "]建议开发者组合使用这些工具以全面捕捉漏洞库, 同时建议研究者未来可在两个方向深入研究: ① 建立框架和指标来识别漏洞库的误报和漏报; ② 开发自动化技术用于持续地监控来自开源软件库生态的漏洞库传播.",
            "(4) 漏洞库的修复代价评估技术: 虽然大部分的安全漏洞在被披露之后, 漏洞包的开发者能够在短时间内进行修复, 但在语义版本控制、更新滞后和依赖约束机制等多种因素的交互下, 漏洞补丁很容易在开源软件库生态中发生“传播阻塞”的现象",
            ". 因此, 软件项目中的漏洞库通常难以及时根治, 并且升级漏洞库到其补丁版本可能带来很高的修复代价",
            ". 文献[",
            ", ",
            ", ",
            "]的实证研究表明, 影响开发者对安全漏洞修复决策的主要因素包括软件库新版本的功能性、规模大小以及代码修改代价等. Zerouali等人",
            "和Cox等人",
            "探讨了漏洞库修复代价的度量标准, 量化软件库的引用版本与补丁版本之间的差异, 目的是确保在修复安全漏洞的同时, 避免引入兼容性问题.",
            "(5) 漏洞库的可达性分析技术: 被SCA工具警告的漏洞库可能并未被软件项目实际访问到. 因此, 研究人员提出了更细粒度的静态分析与动态测试技术以帮助开发者检测漏洞代码的可达性, 减少不必要的漏洞库修复代价. Ponta等人",
            "和Plate等人",
            "提出了自动化工具Vulas来完成两个任务: ① 首先, 通过挖掘软件库版本控制系统中安全漏洞的修复补丁记录, 判断软件项目引入的软件库版本是否包含漏洞代码片段; ② 其次, 结合静态分析与动态测试技术, 判断软件项目的方法调用路径是否会触发到漏洞代码片段. 随后, 他们又进一步开发工具Eclipse Steady",
            ", 提出了系列标准来对比漏洞代码片段与项目代码片段抽象语法树的相似度, 以定位漏洞位置. 进而利用改进的静态分析与动态测试技术诊断漏洞代码的可达性. 目前该工具已经成功地用于1500个应用程序的100多万次漏洞扫描. Pashchenko等人",
            "提出了更准确的分析框架Vuln4Real来识别真正被调用漏洞库, 综合漏洞补丁记录、软件项目的构建和测试信息与软件库的更新日期等多维度的信息, 对第三方软件库进行分组分析, 最终定位到对具有安全威胁的依赖软件库. 为了提高漏洞可达性报告的精度, Haryono等人",
            "和Kang等人",
            "利用测试用例生成方法为客户端软件库漏洞代码生成测试用例, 从而验证安全漏洞是否会被真正触发.",
            "研究问题4结论总结: 通过分析和调查4种常见的依赖缺陷问题, 现有研究提出如下有效的治理策略: ① 针对API签名变更兼容性问题、API实现变更兼容性问题、API弃用与删除引发兼容性问题、多许可证兼容性问题以及开源许可证不一致问题的治理技术; ② 面向Java、Python、C#、JavaScript、Go、C (Linux)程序语言生态的依赖冲突治理技术; ③ 针对冗余软件库、冗余类文件和冗余函数和代码块的治理技术; ④ 针对0-Day安全漏洞和1-Day安全漏洞的治理技术.",
            "经过20年的研究与实践, 开源软件库生态治理技术取得了长足发展. 尽管如此, 为保障开源软件库生态的可信性与可持续性演化, 在建模与分析、依赖缺陷问题和治理技术这3个方面, 研究人员仍需深入探索.",
            "(1) 开源软件生态建模与分析能力的增强",
            "现代软件以直接依赖的和间接依赖的方式引入混源异构的第三方软件库, 导致开源软件生态建模时依赖拓扑结构错综复杂, 软件库成分模糊不清. 因此, 建模与分析技术应该考虑如下因素.",
            "● 动态更新软件库依赖关系: 实时地捕捉并增量式地更新多种程序语言社区中开源软件库生态的依赖拓扑结构, 是开源生态治理需要解决的首要问题.",
            "● 软件库依赖关系与公开安全漏洞/关键缺陷数据集的贯通: 在开源软件库生态依赖关系、演化行为实时更新的基础上, 贯通公开安全漏洞数据集和关键缺陷数据集等知识库, 才可实现对依赖问题的有效感知与诊断, 同时在生态视角下进行多维度治理决策的利弊权衡. 开源软件生态知识库的构建可以综合3个维度.",
            "① 全面性: 与传统工业化软件生产相比, 开源软件生产的数据开放且种类繁多、规模巨大, 包含了大量有价值的历史记录, 如源代码、版本发布信息、代码提交和修改等软件制品和过程数据, 同时包括软件问答、软件评价等知识交流和反馈数据. 全面地构建知识库能够为问题诊断提供有力支撑.",
            "② 关联性: 多维度开源软件生态元数据在收集和存储的过程中, 需要建立它们之间的关联记录, 以便于追溯和判断缺陷问题在开源软件库生态中的影响性及传播性.",
            "③ 演化性: 开源数据具有碎片分散、快速膨胀的特点. 针对多源异质、广泛关联的开源大数据环境, 需要考虑如何定期增量式补充、更新与维护软件演化信息, 提升知识库的可演化性.",
            "(2) 开源软件库生态中依赖缺陷问题的深入挖掘与全面覆盖",
            "针对软件版本演化的兼容性、软件库依赖冲突、冗余依赖与安全漏洞传播4种常见的依赖缺陷问题, 研究人员在以下关键技术仍需要做出努力与尝试.",
            " 精准的程序分析能力: 精细、高效的程序分析能够识别到不同粒度软件库或代码片段间的调用路径、控制关系与数据流依赖关系. 上述信息有助于判断兼容性问题是否会引发程序异常行为, 哪些软件库版本组合会互不兼容, 安全漏洞会不会真正 对软件造成攻击. 对于软件成分分析、冗余依赖、依赖冲突等问题的诊断同样需要精准的程序分析能力, 以避免依赖缺陷问题的误报.",
            " 不同程序语言的差异与共性建模: 不同的程序语言社区存在不同的: ① 依赖配置模式; ② 软件库版本的约束规则; ③ 依赖资源冲突下的覆盖规则; ④ 软件中央仓库的更新与维护特性; ⑤ 依赖缺陷的表现形式. 针对上述5个方面的差异和共性进行建模, 有助于打破不同程序语言生态之间壁垒, 形成贯通式问题诊断技术.",
            " 生态视角下的利弊权衡: 在开源软件库生态中, 多样化的版本组合极易引发兼容性问题. 考虑到软件库在开源软件库生态中的缺陷传播性, 借用Watchman",
            "和Hero",
            "等技术治理Python和Go语言生态依赖问题的观点, 应当根据知识库中软件生态的全局视角, 结合多维度的利弊权衡, 得到软件项目之间相互影响更小且更有益于软件生态的治理策略.",
            "此外, 研究人员需要力求做到依赖缺陷问题的全面覆盖. 例如, 近期涌现出文献[",
            ",",
            "-",
            "]探讨由于依赖缺失而导致的软件不可重复构建问题; 面向特定领域的软件(如人工智能领域)探索具备领域特点的依赖缺陷问题",
            "等. 研究人员仍需不断探索和挖掘开源软件库生态中的依赖缺陷问题, 不断推进开源软件库生态治理技术的发展.",
            "(3) 开源软件库生态依赖缺陷问题治理技术的持续优化与提升",
            "大多数的安全漏洞在被披露后短期内便伴随着修复补丁的发布, 但是由于开源软件库生态中软件库间版本更新的滞后性, 使得漏洞补丁无法快速传播, 阻塞在开源软件库生态的依赖路径中. 因此, 研究人员应当攻克如下挑战, 以实现开源软件库生态中安全漏洞大规模清理.",
            "● 监控软件库依赖链路的版本约束范围和更新状态(补丁得以传播的前提).",
            "● 感知软件库的活跃程度(软件库版本得以更新的前提).",
            "● 诊断软件库依赖链路中漏洞补丁未能得以传播的原因(定位携带补丁的软件库版本被“阻塞”的症结).",
            "解决上述3个问题, 有助于推动开源生态的少数核心软件库以较低的修复代价, 最大程度地加速漏洞补丁沿着依赖链路广泛传播, 使得更多下游软件库自动化地引入安全漏洞补丁.",
            "(4) 面向特定领域的开源软件库生态构建",
            "现有的开源软件库生态治理技术可以改进并泛化到面向特定领域的软件库生态构建与维护中. 例如, 面向泛在操作系统的开源软件库生态构建. 在泛在计算的时代蓝海下, 泛在操作系统的新形态正在兴起. 然而, 泛在操作系统面对的泛在资源呈现海量、异质、异构等特性, 资源管理的复杂度呈指数级增加. 因此, 它需要软件库生态便于在泛在环境下按需加载和管理、支持各种程序语言的泛在应用, 并且能给保证其安全可靠运行. 攻克开源软件库生态演化与维护和质量保证的技术, 有助于推动构建面向泛在操作系统的软件供应链, 围绕泛在计算模式打造自主可控的技术体系.",
            "开源软件库生态治理技术不断地被研究人员拓展、梳理与总结. 过往的相关综述研究大多关注于开源软件生态系统整体架构的分析或单一生态的第三方软件库分析技术. 本文是第1篇针对多种程序语言社区中开源软件库生态的建模方法和演化行为、依赖缺陷问题及其治理技术进行全面综述的文章, 系统地梳理了领域内近20多年的研究进展.",
            "Mainikas等人",
            "对软件生态系统的演化历程进行了研究综述, 先后梳理了发表于2007–2012年间的90篇文献, 以及2007–2014年间的231篇文献, 关注论文发表数量和趋势、经验模型数量和生态系统类型等方面. 他们认为特定领域软件生态系统的理论、方法和工具的研究是未来的发展方向, 并且给出趋势与展望的建议. Axelsson等人",
            "针对软件生态系统的研究进展, 综述了2011–2014年间的6篇相关文献. 关注于软件生命周期中各个阶段的质量保证问题. 类似地, Franco-Bedoya等人",
            "对开源软件生态系统的定义、建模和分析技术进行深入研究、分类和总结. 他们收集了2003–2015年间的82篇相关论文, 发现研究者在软件生态系统的建模与分析、质量模型与标准定义等方面亟需更加深入的探索. 然而, 上述工作并未探讨开源软件库生态的演化和依赖缺陷问题的治理技术.",
            "Breivold等人",
            "系统地回顾了开源软件演化研究领域的进展, 综述了2007–2009年间的134篇文献, 深入探讨了软件演化趋势、软件演化评估度量等方面的工作. 他们建议研究人员统一术语解释; 更多关注开源软件的可变性、可扩展性等特性; 在软件架构层面理解开源软件的演化历程. 文中仅关注了开源软件演化研究, 而未深入讨论不同软件生态的演化趋势, 更未涉及开源软件库生态的治理技术.",
            "Zhan等人",
            "对安卓第三方软件库的相关研究进行了文献综述. 他们收集了2012–2020年间安卓第三方软件库的74篇相关研究论文, 总结了安卓生态中第三方软件库相关的缺陷与维护问题, 聚焦于安卓应用的第三方软件库检测技术、安全相关问题、安卓软件库的权限降级、安卓软件库维护等方面的工作.",
            "历经20年的发展, 开源软件库生态治理技术得到了产业界和学术界的广泛关注与深入研究, 推动了软件产业的转型与升级. 现有工作围绕着开源软件库生态的建模与分析、演化行为、依赖缺陷问题及其相应的治理技术开展研究, 形成了清晰脉络的理论与技术体系. 然而, 依然缺少全局和共性的视角去审视软件演化行为的不可预见性、构建环境的不可控制性、上下游软件库依赖关系的复杂性以及程序语言的多样性, 以软件生态是视角持续地监测及治理依赖缺陷问题.",
            "本文综述了领域相关研究进展, 并对未来发展方向进行展望. 开源软件库的生态观不仅为软件科学带来新观点和新视角, 也可以帮助人们更好地理解和构建软件生态. 面对新时代的新蓝海, 本文的愿景是能够推动领域发展、加快布局, 构建可信开源软件库生态."
        ]
    }
]